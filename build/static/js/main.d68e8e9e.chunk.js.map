{"version":3,"sources":["components/Firebase.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","inpRef","useRef","pRef","linkRef","btnRef","reference","Firebase","storage","ref","useState","urls","setUrls","loading","setLoading","React","useLayoutEffect","listAll","then","res","items","forEach","item","getDownloadURL","url","u","name","type","onClick","file","current","files","task","child","uuid","put","on","snapshot","p","bytesTransferred","totalBytes","value","textContent","err","console","log","href","innerHTML","max","className","Table","striped","bordered","hover","responsive","style","textAlign","colSpan","map","d","i","download","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d68e8e9e.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDC9vzE8SUhq6XBXf4v70nFmcl3JxBsSyE\",\r\n  authDomain: \"myflutterstorage.firebaseapp.com\",\r\n  projectId: \"myflutterstorage\",\r\n  storageBucket: \"myflutterstorage.appspot.com\",\r\n  messagingSenderId: \"4772465365\",\r\n  appId: \"1:4772465365:web:20cf9328db020847b3705c\"\r\n};\r\n\r\nexport default firebase.initializeApp(firebaseConfig);","import React, { useRef, useState } from 'react';\nimport uuid from 'react-uuid';\nimport Firebase from './components/Firebase';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Table from 'react-bootstrap/Table'\n\nfunction App() {\n\n  const inpRef = useRef(null);\n  const pRef = useRef(null);\n  const linkRef = useRef(null);\n  const btnRef = useRef(null);\n  const reference = Firebase.storage().ref('myfiles');\n  const [urls, setUrls] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  const onClickHandler = ()=>{\n    const file = inpRef.current.files[0];\n\n    if(file == null) return;\n    var task = reference.child(uuid()+file.name).put(file);\n\n    task.on('state_changed',snapshot=>{\n      var p = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      pRef.current.value = p;\n      btnRef.current.textContent = 'Wait...'\n    },err=>{\n      console.log(err)\n    },()=>{\n      task.snapshot.ref.getDownloadURL()\n      .then(url=>{\n        linkRef.current.href = url;\n        pRef.current.value = 0;\n        inpRef.current.value = null;\n        linkRef.current.innerHTML = `<a target=\"_blank\" href=${url}>${url}</a>`;\n        btnRef.current.textContent = 'Save File'\n      })\n    })\n  }\n\n  React.useLayoutEffect(()=>{\n    reference.listAll()\n    .then(res=>{\n      res.items.forEach(item=>{\n        item.getDownloadURL()\n        .then(url=>{setUrls(u=>[...u,{name:item.name,url:url}])})\n      })\n    }).then(()=>{\n      setLoading(false);\n    })\n  },[])\n\n  return (\n    <>\n        <input type=\"file\" ref={inpRef} />\n        <button ref={btnRef} onClick={onClickHandler}>Save File</button><br/>\n        <progress ref={pRef} max={100} value={0}></progress>\n        <p ref={linkRef}>No file uploaded</p>\n        <br/>\n        <div className=\"p-4\">\n          <Table striped bordered hover responsive>\n            <thead>\n              <tr style={{textAlign:'center'}}>\n                <th>#</th>\n                <th>File name</th>\n                <th>File URL</th>\n              </tr>\n            </thead>\n            {\n                loading ? <tbody>\n                    <tr><td colSpan={3} style={{textAlign:'center'}}>Loading...</td></tr>\n                </tbody> : <tbody>\n                    {\n                      urls.map((d,i)=>{\n                        return <tr key={i} style={{textAlign:'center'}}>\n                          <td>{i+1}</td>\n                          <td>{d.name}</td>\n                          <td><a href={d.url} download>Download file</a></td>\n                        </tr>\n                      })\n                    }\n                </tbody>\n              }\n          </Table>\n        </div>\n        \n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}